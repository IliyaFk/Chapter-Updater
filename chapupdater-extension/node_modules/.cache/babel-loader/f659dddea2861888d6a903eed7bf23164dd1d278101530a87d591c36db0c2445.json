{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iliya\\\\Desktop\\\\Projects\\\\React-Chapter-Updater\\\\chapupdater-extension\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport { Button, createTheme, Grid, ThemeProvider, Typography, Box, TextField } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useMemo, useState } from 'react';\nimport \"./App.css\";\n\n// Define the shape of the message array elements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  // State to hold user input and fetched data\n  const [mangaName, setMangaName] = useState('');\n  const [message, setMessage] = useState([]);\n  const handleSubmit = event => {\n    event.preventDefault(); // Prevent default form submission\n\n    // Fetch data from the backend using the user input (mangaName)\n    fetch(`http://localhost:8000/message`, {\n      method: 'POST',\n      // Assuming your backend is set to accept POST requests\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        mangaName\n      }) // Send mangaName to the backend\n    }).then(res => res.json()).then(data => setMessage(data.message || [])) // Ensure data is an array\n    .catch(err => console.error(\"Error fetching message:\", err));\n  };\n  const theme = useMemo(() => createTheme({\n    palette: {\n      type: prefersDarkMode ? 'dark' : 'light'\n    },\n    typography: {\n      h1: {\n        fontSize: 16,\n        fontWeight: 400\n      },\n      body1: {\n        fontFamily: 'monospace',\n        fontSize: 18\n      }\n    }\n  }), [prefersDarkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      component: \"main\",\n      padding: 2,\n      display: \"flex\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h1\",\n            children: \"Manga Chapters Fetcher\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              multiline: true,\n              inputProps: {\n                style: {\n                  color: \"black\"\n                }\n              },\n              label: \"Enter Manga Name\",\n              variant: \"outlined\",\n              value: mangaName,\n              onChange: e => setMangaName(e.target.value) // Update state as user types\n              ,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Fetch Chapters\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: message.length > 0 ? message.map((chapter, index) => /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: [chapter.chapterInfo, \" - \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: `https://mangafire.to${chapter.chapterLink}`,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: \"Read\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 43\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            children: \"No data available\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"609k2osUli2bNbsFvHv0CtFoCRM=\", false, function () {\n  return [useMediaQuery];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Button","createTheme","Grid","ThemeProvider","Typography","Box","TextField","useMediaQuery","useMemo","useState","jsxDEV","_jsxDEV","App","_s","prefersDarkMode","mangaName","setMangaName","message","setMessage","handleSubmit","event","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","json","data","catch","err","console","error","theme","palette","type","typography","h1","fontSize","fontWeight","body1","fontFamily","children","component","padding","display","container","direction","justifyContent","alignItems","spacing","item","variant","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","multiline","inputProps","style","color","label","value","onChange","e","target","required","length","map","chapter","index","chapterInfo","href","chapterLink","rel","_c","$RefreshReg$"],"sources":["C:/Users/Iliya/Desktop/Projects/React-Chapter-Updater/chapupdater-extension/src/App.tsx"],"sourcesContent":["import { Button, createTheme, Grid, ThemeProvider, Typography, Box, TextField } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useMemo, useState, useEffect } from 'react';\nimport \"./App.css\";\n\n// Define the shape of the message array elements\ninterface Chapter {\n  chapterInfo: string;\n  chapterLink: string;\n}\n\nfunction App() {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  // State to hold user input and fetched data\n  const [mangaName, setMangaName] = useState<string>('');\n  const [message, setMessage] = useState<Chapter[]>([]);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault(); // Prevent default form submission\n\n    // Fetch data from the backend using the user input (mangaName)\n    fetch(`http://localhost:8000/message`, {\n      method: 'POST', // Assuming your backend is set to accept POST requests\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ mangaName }), // Send mangaName to the backend\n    })\n      .then((res) => res.json())\n      .then((data) => setMessage(data.message || [])) // Ensure data is an array\n      .catch((err) => console.error(\"Error fetching message:\", err));\n  };\n\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n        typography: {\n          h1: {\n            fontSize: 16,\n            fontWeight: 400,\n          },\n          body1: {\n            fontFamily: 'monospace',\n            fontSize: 18,\n          },\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Box component='main' padding={2} display='flex'>\n        <Grid container direction='column' justifyContent='center' alignItems='center' spacing={2}>\n          <Grid item>\n            <Typography variant='h1'>Manga Chapters Fetcher</Typography>\n          </Grid>\n\n          {/* Form to get user input */}\n          <Grid item>\n            <form onSubmit={handleSubmit}>\n              <TextField\n                multiline inputProps={{ style: { color: \"black\" } }}\n                label=\"Enter Manga Name\"\n                variant=\"outlined\"\n                value={mangaName}\n                onChange={(e) => setMangaName(e.target.value)} // Update state as user types\n                required\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Fetch Chapters\n              </Button>\n            </form>\n          </Grid>\n\n          {/* Display fetched data */}\n          <Grid item>\n            {message.length > 0 ? (\n              message.map((chapter, index) => (\n                <Typography key={index} variant='body1'>\n                  {chapter.chapterInfo} - <a href={`https://mangafire.to${chapter.chapterLink}`} target=\"_blank\" rel=\"noopener noreferrer\">Read</a>\n                </Typography>\n              ))\n            ) : (\n              <Typography variant='body1'>No data available</Typography>\n            )}\n          </Grid>\n        </Grid>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}